变量名：是对某一空间地址的抽象命名；
指针的概念：可以把指针理解成具体的地址，是一个无符号整数，是一个以当前系统寻址范围为取值范围的证书。在32位系统下寻址能力是4GB，二进制表示长度为32bit，指针的定义很简单，数据类型 * 变量名。
指针变量：就是把一个指针的地址值用一个变量表示出来

int i = 1;
int *p = &i;

不管指针的类型是什么，指针在同一个平台的大小是相同的，32位是4个字节。
指针变量一定和指的值是同一数据类型，比如整形指针必须指向整型值。
指针一旦定义出来就要给一个明确的指向。


野指针：野指针是指没有初始化栈空间，没有指针指向，所以称为野指针。

空类型指针： void *q = NULL;在不确定到底使用哪一个数据类型的时候使用，也称为万能指针。

下面是一个指针定义的例子
#include<stdio.h>
int main()
{
        int a= 100;
        int * p = NULL;
        p = &a;
        *p = 200;
        printf("address : %p P: %p a:%d \n", &a,p,a);
        return 0;
}

指针运算：取地址，取*，关系运算。
p++和p+1不一样，p++ -> p = p+1

int main()
{
        int a[] = {5,1,7,2,8,3};
        int y;
        int *p = &a[1];
        
        y = (*--p)++;
        printf("y = %d\n",y);
        printf("a[0] = %d\n",a[0]);
        
        exit(0);
 }
上面这段程序中y的值为5，因为y先进行括号内部的自减，指向a[0],而a[0]的值为5，然后在自增，但是自增在赋值之后，所以y的值输出为5，而a[0]的值为6；

指针与数组

指针与一维数组
指针与二维数组
指针与字符数组

指针数组与数组指针
        数组指针：存储类型 数据类型 （* 指针名【下标】）=值
                如：int (*p)[3] -> type name; -> int[3] *p;,这里q+1的话，指针p会指向p+3之后的地址
指针与字符数组
        char *str = "hello";
        char *str[] = "hello";
      这两句话是不相同的，第一句话是指针指向了一个字符串常量，是不可以用strcpy函数来覆盖的，可以将指针指向其他要覆盖的字符串就可以了，而第二句是指向了一个特定的空间，可以用该函数来覆盖，
const与指针
const 可以将变量常量话
        const int a; 常量指针
        int const a;
        
        const int *p; 
        int const *p;
        
        int *const p;指针常量
        
        const int *const p;
如何区分指针常量和常量指针，如果先看到的是const则是常量指针，如果const后面跟一个目标，用来保护目标不能变，星在const前，则后面的指针变量的值不能变
